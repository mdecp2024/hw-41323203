<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323203">https://github.com/mdecp2024/hw-41323203</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323203/content/About.html">https://mdecp2024.github.io/hw-41323203</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p>Brython建立</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ijznORT_S1Y?si=a6j9GM9e-eItsJ3C" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一</p>
<p><span>操作:</span></p>
<p><span> Brython </span></p>
<p><span>1.複製程式一的原始碼</span></p>
<p><span> 2.到個人網站的Brython</span></p>
<p><span> 3.清除輸出區 </span></p>
<p><span>4.貼上程式一的原始碼</span></p>
<p><span> 5.Run </span></p>
<p><span>SciTE 編輯器</span></p>
<p><span> 1.開啟SciTE 編輯器 </span></p>
<p><span>2.儲存檔案</span></p>
<p><span> 3.貼上程式一的原始碼</span></p>
<p><span> 4.Tool--Go </span></p>
<p><span>命令提示字元視窗</span></p>
<p><span> 1.開啟命令提示字元視窗</span></p>
<p><span> 2.輸入cmd </span></p>
<p><span>3.輸入python </span></p>
<p><span>4.貼上程式一的原始碼</span></p>
<p><span> Jupyter Lab </span></p>
<p><span>1.開啟命令提示字元視窗</span></p>
<p><span> 2.輸入cd notebook </span></p>
<p><span>3.輸入jupyter lab --collaborative</span></p>
<p><span> 4.進入Jupyter Lab網頁 </span></p>
<p><span>5.建立new launcher </span></p>
<p><span>6.貼上程式一的原始碼 </span></p>
<p><span>7.執行 </span></p>
<p><span>Codespaces </span></p>
<p><span>1.新增檔案 /檔案名稱.py</span></p>
<p><span> 2.安裝python模組 </span></p>
<p><span>3.新增終端機 </span></p>
<p><span>4.貼上程式一的原始碼 </span></p>
<p><span>5.輸入python exam.py </span></p>
<p><span>6.執行 </span></p>
<p><span>心得: </span></p>
<p><span>利用這次測驗，我學到5種不同工具寫程式的方法，所以如果其中一種不能使用，還是有很多其他的工具可以用，其中我發現在Codespaces新增檔案時，檔案命名的最後沒有加.py，會導致程式無法執行。</span></p>
<p><span>操作影片如下:</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/7lVLgnbJCkU?si=iNll6hSiSkRnbTFJ" title="YouTube video player" width="560"></iframe></p>
<p><span></span></p>
<p><span></span></p>
<p><span>題目二</span></p>
<div><span>請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方?</span></div>
<div><span>與所謂的"關鍵字"(</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9d7d4227cc13cdad06544e3960c90a1adfb5c388/python_keywords.py">Keywords</a><span>)有關係嗎?</span></div>
<div>Answer:</div>
<div>1.不可以用數字開頭，變數名稱的第一個字母必須是大小寫英文字母 。</div>
<div>2.變數名稱不能與Python關鍵字或函式名稱相同。<span>關鍵</span><span>字如print、def、if、else、for 等等，原本就是在Python中會被使用到的，不能被拿來作為變數的名稱。</span></div>
<div><span></span></div>
<div><span>請實際舉例, 針對 Python 程式命名的規則編寫程式, 並採上一題的五種程式執行方法, 展示正確變數命名與違反變數命名時, 所顯示的錯誤訊息回應.</span></div>
<div><span></span></div>
<div><span></span></div>
<div><span>操作影片如下:</span></div>
<p><span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/v6ITtptrX9c?si=yvs2glPDtnJ5cR3F" title="YouTube video player" width="560"></iframe></span></p>
<p><span>題目三</span></p>
<div><span>解題流程: </span></div>
<div><span>利用 Python 程式解決物理問題 </span></div>
<div><span>A jet touches down at velocity 310 km/h. Find the constant acceleration required to stop the aircraft 1000 m down the runway.</span></div>
<div><span> 解:</span></div>
<div><span> 1.先給定值 </span></div>
<div><span>2.利用方程式 v^2 = v0^2 + 2ad 求解加速度 (a)</span></div>
<div><span> 3.最後得到答案:所需的恆定加速度為-3.71 m/s²。 </span></div>
<div><span></span></div>
<div><span> 利用 Python 程式解決微積分問題 </span></div>
<div><span>Under ideal conditions a certain bacteria population is known to double every three hours. Suppose that there are initially 100 bacteria. When will the population first reach 50,000 ?</span></div>
<div><span> 解: </span></div>
<div><span>1.導入數學 </span></div>
<div><span>2.先給定值 </span></div>
<div><span>3.計算人口達到P_target的時間 方程式: t = T * math.log(P_target / P0, 2)</span></div>
<div><span> 3.最後得到答案:26.90後人口將首次達到50000。 </span></div>
<div><span></span></div>
<div><span> 心得:</span></div>
<div><span></span></div>
<div>利用python來算物理及微積分的問題，只要將題目所給的資訊及方程式，輸入給python，就能夠得到答案非常方便，但這個前提是要有公式，才能解題，之後我希望可以學到如何用python證明公式是正確的。</div>
<div></div>
<div></div>
<div><span>操作影片如下:</span></div>
<div></div>
<div><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ryXMIrtv9cY?si=uOGlVHKddnYZLlyR" title="YouTube video player" width="560"></iframe></div>
<h3>w11_hw</h3>
<p><span>題目一 </span><span>請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/d52c6488cab1cd3cf814c3e4c19319bc/raw/d63a0ccfc5107f3f5ee7886a36bf81343652eb45/w11.py">第1題的Brython頁面</a></p>
<p><span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/t2XCfFZqARI?si=qhhYbcYlakHJ0MVN" title="YouTube video player" width="560"></iframe></span></p>
<p><span></span></p>
<div></div>
<div><span>題目二 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</span></div>
<div>
<div></div>
<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/d52c6488cab1cd3cf814c3e4c19319bc/raw/d63a0ccfc5107f3f5ee7886a36bf81343652eb45/w11-2.py">第2題的Brython頁面</a></div>
<div><a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/d52c6488cab1cd3cf814c3e4c19319bc/raw/d63a0ccfc5107f3f5ee7886a36bf81343652eb45/w11-2.py"></a></div>
<div><span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/xUDOogstcIk?si=3txJvMz8Gt3x5W28" title="YouTube video player" width="560"></iframe></span></div>
<div><br/><span></span></div>
<div>
<p><span>心得:</span></p>
<p><span>這次作業我發現給gpt一個正確的關鍵字非常重要，前面好幾次我做出來的圓都是不規則形狀的，後來發現是*的字形必須是全形才能做出一個完整的圓。</span></p>
<p><span></span></p>
<p><span>3.</span></p>
<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/d52c6488cab1cd3cf814c3e4c19319bc/raw/6460a0203b0b39e7c7fe691110a0d6162f49581f/w11-3.py">11/27程式1</a></div>
<div></div>
<div><a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/d52c6488cab1cd3cf814c3e4c19319bc/raw/e22aa724394fd79c1da76e3b316dd2a7b22af4f7/w11-4.py">11/27程式2</a></div>
<div></div><h3>w12_hw</h3>
<p>01</p>
<p><span>input():會讓程式暫停，等待使用者輸入一些文字，python在取得使用者輸入文字後，會把輸入的文字存到一個變數內</span></p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/dfae8bc65f042eb24bfc6981e5317452d9550056/w12-01-1.py">input("What's your favorite color?")</a></p>
<p><span>print():列印輸出</span></p>
<p><span>範例:</span><a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/dfae8bc65f042eb24bfc6981e5317452d9550056/w12-01-2.py">cat</a></p>
<p></p>
<p>02</p>
<p><span>字串:以成對的引號來呈現，單引號、雙引號 、三個單引號、三個雙引號都可以拿來表示字串，代表文字的意思</span></p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/071c95c7a71100d254eebcc0ed01e5ac84dfb08f/w12-02-1.py">姓氏 名字</a></p>
<p>兩個字串相加使用+</p>
<p>範例:<code><span></span></code><a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/071c95c7a71100d254eebcc0ed01e5ac84dfb08f/w12-02-2.py">姓名+最喜歡的食物</a></p>
<p></p>
<p>03</p>
<p>if... in.../else...:判斷輸入的文字有沒有在字串內</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/c83426dc22209d261ca4f45e5ba92d8ba3890c8b/w12-03.py">買書</a></p>
<p></p>
<p>04</p>
<p>.append()/.remove():在清單內增加或刪除項目</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/c83426dc22209d261ca4f45e5ba92d8ba3890c8b/w12-04.py">購物清單</a></p>
<p></p>
<p>05</p>
<p><span>.index() :可以用來搜尋字串中指定字元的位置，它會回傳第一個符合條件的字元的索引值</span></p>
<p><span>.pop():移除並傳回集合中的任意元素</span></p>
<p><span>.insert():將一個項目插入至 list 中給定的位置</span></p>
<p><span>範例:</span><a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/132d52dffb7589ad64a9c535c8ea0d810ba81e91/w12-05.py">今日菜單</a></p>
<p></p>
<p>06</p>
<p><span>[</span><span>start</span><span>:</span><span>stop</span><span>:</span><span>step</span><span>]</span></p>
<p>start(起始索引):切片開始的位置，默認為0</p>
<p>stop(結束<span>索引</span>):<span>切片結束的位置(不包含該索引位置的元素)</span></p>
<p><span>step(步長):每次跳過的元素數量，默認為1</span></p>
<p><span>範例:</span><strong></strong><code><span></span></code><a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/132d52dffb7589ad64a9c535c8ea0d810ba81e91/w12-06.py">環遊世界</a></p>
<p></p>
<p>07</p>
<p>索引修改:使用單一索引修改清單中的某個元素（如<span> </span><code>senses[1]</code>）</p>
<p>分片替換:用切片語法（如<span> </span><code>senses[3:5]</code>）修改一段區間的元素</p>
<p>帶步長的切片修改:通過步長語法（如<span> </span><code>senses[0:3:2]</code>）選擇非連續的元素進行替換</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/80fd690299356d2f0f08edc20573dd80da9cdf46/w12-07-1.py">感官</a></p>
<p>1.[:5]:取出索引 0 到 4 的元素</p>
<p>2.<span>[:5]:</span>取出索引 5 之後的元素</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/80fd690299356d2f0f08edc20573dd80da9cdf46/w12-07-2.py">行星</a></p>
<p>del<strong>語句</strong>：</p>
<p>刪除清單中的元素，或刪除整個清單</p>
<p>使用單一索引（如 <code>del house[1]</code>）刪除特定位置的元素</p>
<p>使用切片語法（如 <code>del house[4:6]</code> 或 <code>del house[::2]</code>）刪除多個元素</p>
<p>直接對變數使用 <code>del</code>（如 <code>del house</code>），會刪除變數本身</p>
<p>範例:<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/2386fa2acc5338cb55f9ad5c76a9b4b2/raw/80fd690299356d2f0f08edc20573dd80da9cdf46/w12-07-3.py">房子</a></p>
<p></p>
<p>心得:上面的python範例對於我來說，比較好用的應該是範例4的<span>.append()/.remove()，這兩個就很好用，像是批發商需要買很多種的物品，如果突然要新增或刪除其中一項清單，那麼.append()/.remove()就可以派上用場了。</span></p>
<p></p><h3>w13_hw</h3>
<p>1.<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/9b50361812af9dd5e1ac7cf498d40eea/raw/9f17932f49ca2f3811bdbd379ac161283a0fec00/w13-1.py">繪製兩個紅色正方形及對角線</a></p>
<div id="brython_div1">2.<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/9b50361812af9dd5e1ac7cf498d40eea/raw/821ee6f0f80d56e73815636fcfcb1bcf618aa1bb/w13-2.py">加上外切圓</a></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")

grid_size = 1
point_size = max(int(grid_size/2), 1)
ctx.lineWidth = 1

# 1. 繪製兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'  # 設定矩形的邊框顏色為紅色
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 第一個正方形的左上角在(100, 100)，邊長200
ctx.rect(200, 200, 200, 200)  # 第二個正方形的左上角在(200, 200)，邊長200
ctx.stroke()

# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()

# 3. 繪製兩個外切圓 (黑色)
ctx.strokeStyle = 'black'  # 設定圓的顏色為黑色
</script>
</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")

grid_size = 1
point_size = max(int(grid_size/2), 1)
ctx.lineWidth = 1

# 計算對角線長度 (200 * sqrt(2))，並計算外切圓半徑
side_length = 200
radius = side_length * math.sqrt(2) / 2  # 外切圓半徑

# 1. 繪製兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'  # 設定矩形的邊框顏色為紅色
ctx.beginPath()
ctx.rect(100, 100, side_length, side_length)  # 第一個正方形
ctx.rect(200, 200, side_length, side_length)  # 第二個正方形
ctx.stroke()

# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()

# 3. 繪製兩個外切圓 (黑色)
ctx.strokeStyle = 'black'  # 設定圓的顏色為黑色

# 第一個正方形的圓 (圓心為 (200, 200))
ctx.beginPath()
ctx.arc(200, 200, radius, 0, 2 * math.pi)  # 圓心在正方形的中心 (200, 200)
ctx.stroke()

# 第二個正方形的圓 (圓心為 (300, 300))
ctx.beginPath()
ctx.arc(300, 300, radius, 0, 2 * math.pi)  # 圓心在正方形的中心 (300, 300)
ctx.stroke()
</script>
</p><h3>w14_ex</h3>
<p><a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/7e33a7b1ccc2549d7537a500ad513c92/raw/6767cfdb408aa2195a4be5f5e0837d9f51159097/w14.py"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">三圓的著色</span></span></a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
     
    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")
     
    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² &lt;= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的三個圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    """
    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    x3, y3, r3 是圓3的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
     
    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)
     
    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}
 
    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色
        current_color = None 
        
        # 遍歷當前行中的每個像素點 (px, py)
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            # 判斷該點是否在圓3內
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
             
            if in_circle1 and in_circle2 and in_circle3:
                # 如果點同時在三個圓內，則是三個圓的交集區域
                if "intersection_all" not in color_dict:
                    color_dict["intersection_all"] = random_color_generator()
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                # 如果點在圓1和圓2的交集區域
                if "intersection_12" not in color_dict:
                    color_dict["intersection_12"] = random_color_generator()
                current_color = color_dict["intersection_12"]
            elif in_circle1 and in_circle3:
                # 如果點在圓1和圓3的交集區域
                if "intersection_13" not in color_dict:
                    color_dict["intersection_13"] = random_color_generator()
                current_color = color_dict["intersection_13"]
            elif in_circle2 and in_circle3:
                # 如果點在圓2和圓3的交集區域
                if "intersection_23" not in color_dict:
                    color_dict["intersection_23"] = random_color_generator()
                current_color = color_dict["intersection_23"]
            elif in_circle1:
                # 如果點只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 如果點只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色
 
            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定三個圓的圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100

# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</pre><h3>w15</h3>
<p><span>題目一: <a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/0feaa8b307192eaf6d43d5df00cd741a/raw/0e1fb4bca5e7299679da0edcb9e310dad261e8d1/w15.py">從 1 累加到 100</a></span></p>
<p><span>題目二:<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/0feaa8b307192eaf6d43d5df00cd741a/raw/f90ee0d3b66192983e22407cde9e8cb3b1666452/w15-2.py">addto</a></span></p>
<p><span>題目三:<a href="https://mdecp2024.github.io/hw-41323203/content/Brython.html?src=https://gist.githubusercontent.com/41323203/0feaa8b307192eaf6d43d5df00cd741a/raw/0aed525a9156aea08d617db6d89ad6e9d203e18a/w15-3.py">add_only_even</a></span></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p><h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h3>HW 3 Exam</h3>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w8</h3>
<p><span>開啟 coppeliaSim.exe 及 start_ipv6.bat</span></p>
<p><span>將put_cubes_into_scene_1.py開啟到可攜程式，點擊Tools - Go</span></p>
<p><span>coppeliaSim.exe就會執行出模擬場景</span></p>
<p><img alt="" height="544" src="/images/螢幕擷取畫面 2024-10-16 113520.png" width="800"/></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>